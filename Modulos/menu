#!/bin/bash
barra="\033[0;34m—————————————————————————————————————————————————————— \033[0m"
IP=$(cat /etc/IP)
x="ok"

fun_bar () {
comando[0]="$1"
comando[1]="$2"
 (
[[ -e $HOME/fim ]] && rm $HOME/fim
${comando[0]} -y > /dev/null 2>&1
${comando[1]} -y > /dev/null 2>&1
touch $HOME/fim
 ) > /dev/null 2>&1 &
 tput civis
echo -ne "\033[1;33m["
while true; do
   for((i=0; i<18; i++)); do
   echo -ne "\033[1;31m#"
   sleep 0.1s
   done
   [[ -e $HOME/fim ]] && rm $HOME/fim && break
   echo -e "\033[1;33m]"
   sleep 1s
   tput cuu1
   tput dl1
   echo -ne "\033[1;33m["
done
echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
tput cnorm
}

menu ()
{
function autoexec () {
   if grep "menu;" /etc/profile > /dev/null; then
      clear
      echo -e "\033[1;32mDESATIVANDO AUTO EJECUCIÓN\033[0m"
      offautmenu () {
         sed -i '/menu;/d' /etc/profile
      }
      echo ""
      fun_bar 'offautmenu'
      echo ""
      echo -e "\033[1;31mAUTO EJECUCIÓN DESATIVADO!\033[0m"
      sleep 1.5s
      menu
   else
      clear
      echo -e "\033[1;32mACTIVANDO AUTO EJECUCIÓN\033[0m"
      autmenu () {
         grep -v "^menu;" /etc/profile > /tmp/tmpass && mv /tmp/tmpass /etc/profile
         echo "menu;" >> /etc/profile
      }
      echo ""
      fun_bar 'autmenu'
      echo ""
      echo -e "\033[1;32mAUTO EJECUCIÓN ACTIVADO!\033[0m"
      sleep 1.5s
      menu
   fi

}

#limiter
function limit1 () {
   clear
   echo -e "\n\033[1;32mINICIANDO LIMITER... \033[0m"
   echo ""
   fun_bar 'screen -dmS limiter limiter' 'sleep 3'
   [[ $(grep -wc "limiter" /etc/autostart) = '0' ]] && {
       echo -e "ps x | grep 'limiter' | grep -v 'grep' && echo 'ON' || screen -dmS limiter limiter" >> /etc/autostart
   } || {
       sed -i '/limiter/d' /etc/autostart
	   echo -e "ps x | grep 'limiter' | grep -v 'grep' && echo 'ON' || screen -dmS limiter limiter" >> /etc/autostart
   }
   echo -e "\n\033[1;32m  LIMITER ACTIVO !\033[0m"
   sleep 3
   menu
}
function limit2 () {
   clear
   echo -e "\033[1;32mPARANDO LIMITER... \033[0m"
   echo ""
   fun_stplimiter () {
      sleep 1
      screen -r -S "limiter" -X quit
      screen -wipe 1>/dev/null 2>/dev/null
      [[ $(grep -wc "limiter" /etc/autostart) != '0' ]] && {
          sed -i '/limiter/d' /etc/autostart
      }
      sleep 1
   }
   fun_bar 'fun_stplimiter' 'sleep 3'
   echo -e "\n\033[1;31m LIMITER PARADO !\033[0m"
   sleep 3
   menu
}
function limit_ssh () {
[[ $(ps x | grep "limiter"|grep -v grep |wc -l) = '0' ]] && limit1 || limit2
}

# SISTEMA RAPIDO
fun_access () {
echo -e "\033[1;32mADM Commands "
echo ""
echo -e "\033[1;32m"
echo -e "    Command     Description"
echo -e "    -------     -----------"
echo -e "    command     Option menu"
echo -e "    nload       nload"
echo -e "    htop        htop"
echo -e "    system      System info"
echo -e "    clean       Clean system"
echo -e "    speed       Speed Test"
echo -e "    time        Time Santiago/Chile"
echo ""
}

velocity () {
aguarde () {
comando[0]="$1"
comando[1]="$2"
 (
[[ -e $HOME/fim ]] && rm $HOME/fim
${comando[0]} > /dev/null 2>&1
${comando[1]} > /dev/null 2>&1
touch $HOME/fim
 ) > /dev/null 2>&1 &
 tput civis
echo -ne "  \033[1;33mAGUARDE \033[1;37m- \033[1;33m["
while true; do
   for((i=0; i<18; i++)); do
   echo -ne "\033[1;31m#"
   sleep 0.1s
   done
   [[ -e $HOME/fim ]] && rm $HOME/fim && break
   echo -e "\033[1;33m]"
   sleep 1s
   tput cuu1
   tput dl1
   echo -ne "  \033[1;33mAGUARDE \033[1;37m- \033[1;33m["
done
echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
tput cnorm
}
fun_tst () {
speedtest --share > speed
}
echo ""
echo -e "   \033[1;32mTESTANDO A VELOCIDADE DO SERVIDOR !\033[0m"
echo ""
aguarde 'fun_tst'
echo ""
png=$(cat speed | sed -n '5 p' |awk -F : {'print $NF'})
down=$(cat speed | sed -n '7 p' |awk -F :  {'print $NF'})
upl=$(cat speed | sed -n '9 p' |awk -F :  {'print $NF'})
lnk=$(cat speed | sed -n '10 p' |awk {'print $NF'})
echo -e "$barra"
echo -e "\033[1;32mPING (LATENCIA):\033[1;37m$png"
echo -e "\033[1;32mDOWNLOAD:\033[1;37m$down"
echo -e "\033[1;32mUPLOAD:\033[1;37m$upl"
echo -e "\033[1;32mLINK: \033[1;36m$lnk\033[0m"
echo -e "$barra"
rm -rf $HOME/speed
}

act_hora () {
# ATUALIZAR HORA AMERICA-SANTIAGO
fun_prog ()
{
	comando[0]="$1" 
    ${comando[0]}  > /dev/null 2>&1 & 
	tput civis
	echo -ne "\033[1;32m.\033[1;33m.\033[1;31m. \033[1;32m"
    while [ -d /proc/$! ]
	do
		for i in / - \\ \|
		do
			sleep .1
			echo -ne "\e[1D$i"
		done
	done
	tput cnorm
	echo -e "\e[1DOK"
}
echo -ne "\033[1;32m[!] \033[1;33mtimedatectl"; fun_prog 'timedatectl'
echo ""
echo -ne "\033[1;32m[!] \033[1;33mtimedatectl list-timezones"; fun_prog 'timedatectl list-timezones'
echo ""
echo -ne "\033[1;32m[!] \033[1;33mtimedatectl list-timezones  | grep Santiago"; fun_prog 'timedatectl list-timezones  | grep Santiago'
echo ""
echo -ne "\033[1;32m[!] \033[1;33mtimedatectl set-timezone America/Santiago"; fun_prog 'timedatectl set-timezone America/Santiago'
echo ""
sleep 1
}

while true $x != "ok"
do

if [[ "$(grep -c "Ubuntu" /etc/issue.net)" = "1" ]]; then
system=$(cut -d' ' -f1 /etc/issue.net)
system+=$(echo ' ')
system+=$(cut -d' ' -f2 /etc/issue.net |awk -F "." '{print $1}')
elif [[ "$(grep -c "Debian" /etc/issue.net)" = "1" ]]; then
system=$(cut -d' ' -f1 /etc/issue.net)
system+=$(echo ' ')
system+=$(cut -d' ' -f3 /etc/issue.net)
else
system=$(cut -d' ' -f1 /etc/issue.net)
fi

on="\033[1;32m◉ " && off="\033[1;31m○ "
[[ `grep -c "^#ADM" /etc/sysctl.conf` -eq 0 ]] && tcp=$off || tcp=$on
[[ -e /etc/Plus-torrent ]] && stsf=$(echo -e "\033[1;32m◉ ") || stsf=$(echo -e "\033[1;31m○ ")
stsbot=$(ps x | grep "bot_plus"|grep -v grep > /dev/null && echo -e "\033[1;32m◉ " || echo -e "\033[1;31m○ ")
autm=$(grep "menu;" /etc/profile > /dev/null && echo -e "\033[1;32m◉ " || echo -e "\033[1;31m○ ")
stson=$(ps x | grep "onlineapp"|grep -v grep > /dev/null && echo -e "\033[1;32m◉ " || echo -e "\033[1;31m○ ")
stsl=$(ps x | grep "limiter"|grep -v grep > /dev/null && echo -e "\033[1;32m◉ " || echo -e "\033[1;31m○ ")
stsu=$(ps x | grep "udpvpn"|grep -v grep > /dev/null && echo -e "\033[1;32m◉ " || echo -e "\033[1;31m○ ")
_ons=$(ps -x | grep sshd | grep -v root | grep priv | wc -l)
[[ "$(cat /etc/SSHPlus/Exp)" != "" ]] && _expuser=$(cat /etc/SSHPlus/Exp) || _expuser="0"
[[ -e /etc/openvpn/openvpn-status.log ]] && _onop=$(grep -c "10.8.0" /etc/openvpn/openvpn-status.log) || _onop="0"
[[ -e /etc/default/dropbear ]] && _drp=$(ps aux | grep dropbear | grep -v grep | wc -l) _ondrp=$(($_drp - 1)) || _ondrp="0"
_onli=$(($_ons + $_onop + $_ondrp))
_ram=$(printf ' %-9s' "$(free -h | grep -i mem | awk {'print $2'})")
mb=$(printf '%-8s' "$(free -h | grep Mem | sed 's/\s\+/,/g' | cut -d , -f6)")
_usor=$(printf '%-8s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
_usop=$(printf '%-1s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
modelo1=$(printf '%-11s' "$(lscpu | grep Arch | sed 's/\s\+/,/g' | cut -d , -f2)")
_core=$(printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)")
_system=$(printf '%-13s' "$system")
_hoje=$(date +'%d/%m/%Y')
_hora=$(printf '%(%H:%M:%S)T')
_onlin=$(printf '%-5s' "$_onli")
_userexp=$(printf '%-5s' "$_expuser")
_tuser=$(awk -F: '$3>=1000 {print $1}' /etc/passwd | grep -v nobody | wc -l)

clear
echo -e "$barra"
[[ ! -e /tmp/att ]]  && {
    echo -e "\033[1;32mPARABENS SUA VERSAO ESTA ATUALIZADA!      \033[1;31m[\033[1;32m PROrV001 \033[1;31m] \033[0m"
    var01='\033[1;37m• \033[1;33m[!]'
} || {
    echo -e "     \033[1;33m[\033[1;31m!\033[1;33m]  \033[1;32mEXISTE UMA ATUALIZACAO DISPONIVEL  \033[1;33m[\033[1;31m!\033[1;33m]\033[0m"
    var01="\033[1;32m> \033[1;32m ! "
}
echo -e "$barra"
echo -e "\033[1;32mOS\033[1;37m/\033[1;32mDATA\033[1;37m/\033[1;32mHORA      MEMORIA RAM      SISTEMA\033[1;37m/\033[1;32mCPU "
echo -e "\033[1;31mOS\033[1;31m: \033[1;37m$_system \033[1;31mTotal\033[1;31m:\033[1;37m$_ram \033[1;31mCore\033[1;31m:\033[1;37m $_core "
echo -e "\033[1;31mDia\033[1;31m: \033[1;37m$_hoje \033[1;31m  Cache\033[1;31m: \033[1;37m$mb\033[1;31m  Base\033[1;31m:\033[1;37m $(uname -m)"
echo -e "\033[1;31mHora\033[1;31m: \033[1;37m$_hora  \033[1;31m  Em uso\033[1;31m: \033[1;37m$_usor\033[1;31m Uso CPU\033[1;31m: \033[1;37m$_usop"
echo -e "$barra"
echo -e "\033[1;32mOnlines:\033[1;37m $_onlin    \033[1;31mExpirados: \033[1;37m$_userexp \033[1;33mTotal: \033[1;37m$_tuser\033[0m"
echo -e "$barra"
echo -e "\033[1;31m[\033[1;32m ADMPLUS COMMUNITY \033[1;31m] IP: \033[1;37m$IP \033[1;31mID: \033[1;37m$USER"
echo -e "$barra"
echo -e "\033[1;31m[\033[1;36m01\033[1;31m] \033[1;37m• \033[1;33mGERENCIAR USUARIOS "
echo -e "\033[1;31m[\033[1;36m02\033[1;31m] \033[1;37m\033[1;37m• \033[1;33mMENU DE FERRAMENTAS "
echo -e "\033[1;31m[\033[1;36m03\033[1;31m] \033[1;37m\033[1;37m• \033[1;33mMENU DE SISTEMA "
echo -e "\033[1;31m[\033[1;36m04\033[1;31m] \033[1;37m\033[1;37m• \033[1;33mMENU DE UTILITARIOS "
echo -e "\033[1;31m[\033[1;36m05\033[1;31m] $var01 \033[1;32mATUALIZAR SCRIPT "
echo -e "\033[1;31m[\033[1;36m06\033[1;31m] \033[1;37m• \033[1;33m[!] \033[1;31mREMOVER SCRIPT "
echo -e "\033[1;31m[\033[1;36m07\033[1;31m] \033[1;37m• \033[1;33mVERIFICACOES $stsl "
echo -e "\033[1;31m[\033[1;36m08\033[1;31m] \033[1;37m• \033[1;33mEXECUCAO AUTOMATICA $autm "
echo -e "\033[1;31m[\033[1;36m09\033[1;31m] \033[1;37m• \033[1;33mMENU DE INSTALACOES "
echo -e "\033[1;31m\033[1;31m[\033[1;36m00\033[1;31m] \033[1;37m• \033[1;33mSAIR DO MENU \033[1;32m<\033[1;33m<\033[1;31m<"
echo -e "$barra"
echo -ne "\033[1;32mOQUE DESEJA FAZER \033[1;33m?\033[1;31m?\033[1;37m : "; read x

case "$x" in 
   1 | 01)
   clear
   usercodes
   ;;
   2 | 02)
   clear
   ferramentascodes
   ;;
   3 | 03)
   clear
   gestorcodes
   ;;
   4 | 04)
   clear
   utilscodes
   ;;
   5 | 05)
   attscript
   ;;
   6 | 06)
   clear
   delscript
   ;;
   7 | 07)
   limit_ssh
   ;;      
   8 | 08)
   autoexec
   ;;
   9 | 09)
   conexao
   exit
   ;;
   0 | 00)
   echo -e "\033[1;31mSaindo...\033[0m"
   sleep 1
   clear
   exit;
   ;;
   option | command | -c)
   clear
   fun_access
   echo -ne "\n\033[1;31mENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
   ;;
   nload)
   clear
   echo -e "\033[1;32mPARA SAIR CLICK CTRL + C\033[1;36m"
   # echo -e "\033[1;32mPARA SAIR CLICK LETRA \033[1;36mq\033[1;36m"
   sleep 3
   [[ $(dpkg --get-selections|grep -w "nload"|head -1) ]] || apt-get install nload -y &>/dev/null
   nload
   ;;
   htop)
   clear
   echo -e "\033[1;32mPARA SAIR CLICK CTRL + C\033[1;36m"
   # echo -e "\033[1;32mPARA SAIR CLICK LETRA \033[1;36mq\033[1;36m"
   sleep 3
   [[ $(dpkg --get-selections|grep -w "htop"|head -1) ]] || apt-get install htop -y &>/dev/null
   htop
   ;;
   system)
   clear
   detalhes
   echo -ne "\n\033[1;31mENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
   ;;
   clean)
   clear
   otimizar
   echo -ne "\n\033[1;31mENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
   ;;
   speed)
   clear
   velocity
   echo -ne "\n\033[1;31mENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
   ;;
   time)
   clear
   act_hora
   echo -ne "\n\033[1;31mENTER \033[1;33mpara retornar ao \033[1;32mMENU!\033[0m"; read
   ;;
   *)
   echo -e "\n\033[1;31mOpcao invalida !\033[0m"
   sleep 1
esac
done
}
menu
#fim